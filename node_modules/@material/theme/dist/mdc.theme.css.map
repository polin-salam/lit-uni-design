{"version":3,"sources":["webpack:///./packages/mdc-theme/mdc-theme.scss","webpack:///./packages/mdc-theme/_css.scss","webpack:///./packages/mdc-theme/_gss.scss"],"names":[],"mappings":";;;;;;;AAsCE;EAGM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;CAhBP;;AAuBK;ECgBA;EC/BF;ED2CA;CD7CH;;AAiBK;ECgBA;EC/BF;ED2CA;CDvCH;;AAiBK;ECUA;EC/BF;ED2CA;CDjCH;;AAWK;ECUA;EC/BF;ED2CA;CD3BH;;AADK;ECgBA;EC/BF;ED2CA;CDrBH;;AAPK;ECgBA;EC/BF;ED2CA;CDfH;;AAbK;ECgBA;EC/BF;ED2CA;CDTH;;AAnBK;ECgBA;EC/BF;ED2CA;CDHH;;AAzBK;ECgBA;EC/BF;ED2CA;CDGH;;AA/BK;ECgBA;EC/BF;ED2CA;CDSH;;AArCK;ECgBA;EC/BF;ED2CA;CDeH;;AA3CK;ECgBA;EC/BF;ED2CA;CDqBH;;AAjDK;ECgBA;EC/BF;ED2CA;CD2BH;;AAvDK;ECgBA;EC/BF;ED2CA;CDiCH;;AA7DK;ECgBA;EC/BF;ED2CA;CDuCH;;AAnEK;ECgBA;EC/BF;ED2CA;CD6CH;;AAzEK;ECgBA;EC/BF;ED2CA;CDmDH;;AA/EK;ECgBA;EC/BF;ED2CA;CDyDH;;AArFK;ECgBA;EC/BF;ED2CA;CD+DH;;AA3FK;ECgBA;EC/BF;ED2CA;CDqEH;;AAjGK;ECgBA;EC/BF;ED2CA;CD2EH;;AAvGK;ECgBA;EC/BF;ED2CA;CDiFH;;AA7GK;ECgBA;EC/BF;ED2CA;CDuFH;;AAnHK;ECgBA;EC/BF;ED2CA;CD6FH;;AAzGG;ECAE;EC/BF;ED2CA;CDmGH;;AA/GG;ECAE;EC/BF;ED2CA","file":"mdc.theme.css","sourcesContent":["//\n// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n// Selector '.mdc-*' should only be used in this project.\n// stylelint-disable selector-class-pattern\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use '@material/feature-targeting/feature-targeting';\n@use './css';\n@use './custom-properties';\n@use './gss';\n@use './replace';\n@use './theme-color';\n\n@mixin core-styles($query: feature-targeting.all()) {\n  $feat-color: feature-targeting.create-target($query, color);\n\n  :root {\n    @include feature-targeting.targets($feat-color) {\n      @each $style in map.keys(theme-color.$property-values) {\n        --mdc-theme-#{$style}: #{map.get(theme-color.$property-values, $style)};\n      }\n    }\n  }\n\n  @each $style in map.keys(theme-color.$property-values) {\n    @if $style != 'background' and $style != 'surface' {\n      .mdc-theme--#{$style} {\n        @include feature-targeting.targets($feat-color) {\n          @include prop(color, $style, true);\n        }\n      }\n    } @else {\n      .mdc-theme--#{$style} {\n        @include feature-targeting.targets($feat-color) {\n          @include prop(background-color, $style);\n        }\n      }\n    }\n  }\n\n  // CSS rules for using primary and secondary (plus light/dark variants) as background colors.\n  @each $style in ('primary', 'secondary') {\n    .mdc-theme--#{$style}-bg {\n      @include feature-targeting.targets($feat-color) {\n        @include prop(background-color, $style, true);\n      }\n    }\n  }\n}\n\n/// Applies a dynamic value to the specified property. This mixin should be used\n/// in theme style mixins when setting properties.\n///\n/// The value may be any of the following:\n/// - a standard CSS value\n/// - a custom property Map, e.g. (varname: --mdc-foo, fallback: blue)\n/// - a Material theme key String, e.g. 'primary', 'on-primary'\n///\n/// @example\n///   @include theme.property(color, teal);\n///   @include theme.property(color, custom-properties.create(--mdc-foo, blue));\n///   @include theme.property(color, primary);\n///\n/// A `$replace` Map parameter may be provided to replace key/value pairs for\n/// string values. This can be used to substitute parameters in complex string\n/// values such as `calc()` with custom properties.\n///\n/// @example\n///   @include theme.property(\n///     width,\n///     calc(foo + bar),\n///     $replace: (foo: custom-properties.create(--mdc-foo), bar: 8px)\n///   );\n///\n/// Note: Material theme key Strings (e.g. `primary`) are not supported as\n/// replacement values.\n///\n/// @param {String} $property - The name of the CSS property.\n/// @param {String | Number | Color | List | Map} $value - The property's value.\n/// @param {Map} $gss - Optional Map of GSS annotations to set.\n/// @param {Map} $replace - An optional Map of replacement key/value pairs if\n///     the `$value` is a string.\n/// @param {Bool} $important - Set to true to add an `!important` rule. Defaults\n///     to false.\n@mixin property(\n  $property,\n  $value,\n  $gss: (),\n  $replace: null,\n  $important: false\n) {\n  @if custom-properties.is-custom-prop($value) {\n    // $value is a custom property Map\n    @include custom-properties.apply(\n      $property,\n      $value,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else if map.has-key(theme-color.$property-values, $value) {\n    // $value is a theme property String\n    $fallback: map.get(theme-color.$property-values, $value);\n    $custom-prop: custom-properties.create(--mdc-theme-#{$value}, $fallback);\n    @include custom-properties.apply(\n      $property,\n      $custom-prop,\n      $gss: $gss,\n      $important: $important\n    );\n  } @else {\n    // $value is a standard CSS value\n    $fallback: null;\n    @if $replace {\n      @if meta.type-of($value) != 'string' {\n        // theme.property() should support non-string replacements in the\n        // future, such as List types\n        // e.g. theme.property(border-radius, 8px foo, $replace: (foo: $foo));\n        @error 'mdc-theme: Invalid replacement value #{$value}. $replace may only be used with string values.';\n      }\n\n      $fallback: replace.replace-string($value, $replace, $fallback: true);\n      $value: replace.replace-string($value, $replace);\n      @if $fallback == $value {\n        // The replacements don't contain custom properties with fallbacks\n        $fallback: null;\n      }\n    }\n\n    @include css.declaration(\n      $property,\n      $value,\n      $fallback-value: $fallback,\n      $gss: $gss,\n      $important: $important\n    );\n  }\n}\n\n// Applies the correct theme color style to the specified property.\n// $property is typically color or background-color, but can be any CSS property that accepts color values.\n// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.\n// @deprecated use the `property()` mixin instead\n@mixin prop($property, $style, $important: false) {\n  @if custom-properties.is-custom-prop($style) {\n    @include custom-properties.apply($property, $style, $important: $important);\n  } @else if theme-color.is-valid-theme-prop-value_($style) {\n    @include css.declaration($property, $style, $important: $important);\n  } @else {\n    @if not map.has-key(theme-color.$property-values, $style) {\n      @error \"Invalid style: '#{$style}'. Choose one of: #{map.keys(theme-color.$property-values)}\";\n    }\n    $value: map.get(theme-color.$property-values, $style);\n\n    @include css.declaration(\n      $property,\n      $value: var(--mdc-theme-#{$style}, $value),\n      $fallback-value: $value,\n      $important: $important\n    );\n  }\n}\n\n/// Perform a recursive map.get on a nested map structure\n/// Returns a value, or `null` if `$map` does not contain `$path`.\n///\n/// @example scss\n///   $color: deep-get((foo: (bar: black)), (foo, bar));\n///   $color === black;\n///\n/// @param {Map} $map - Map to recurse down\n/// @param {List} $path - List of keys to traverse the map\n/// @return {*} The deep value or `null`\n@function deep-get($map: (), $keys: ()) {\n  $result: $map;\n  @each $key in $keys {\n    $result: map.get($result, $key);\n    @if $result == null {\n      @return null;\n    }\n  }\n  @return $result;\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n\n@use 'sass:map';\n@use './gss';\n\n/// When true, add an additional property/value declaration before declarations\n/// that use advanced features such as custom properties or CSS functions. This\n/// adds fallback support for older browsers such as IE11 that do not support\n/// these features at the cost of additional CSS. Set this variable to false to\n/// disable generating fallback declarations.\n$enable-fallback-declarations: true !default;\n\n/// Writes a CSS property/value declaration. This mixin is used throughout the\n/// theme package for consistency for dynamically setting CSS property values.\n///\n/// This mixin may optionally take a fallback value. For advanced features such\n/// as custom properties or CSS functions like min and max, a fallback value is\n/// recommended to support older browsers.\n///\n/// @param {String} $property - The CSS property of the declaration.\n/// @param {*} $value - The value of the CSS declaration. The value should be\n///     resolved by other theme functions first (i.e. custom property Maps and\n///     Material theme keys are not supported in this mixin). If the value is\n///     null, no declarations will be emitted.\n/// @param {*} $fallback - An optional fallback value for older browsers. If\n///     provided, a second property/value declaration will be added before the\n///     main property/value declaration.\n/// @param {Map} $gss - An optional Map of GSS annotations to add.\n/// @param {Bool} $important - If true, add `!important` to the declaration.\n@mixin declaration(\n  $property,\n  $value,\n  $fallback-value: null,\n  $gss: (),\n  $important: false\n) {\n  // Normally setting a null value to a property will not emit CSS, so mixins\n  // wouldn't need to check this. However, Sass will throw an error if the\n  // interpolated property is a custom property.\n  @if $value != null {\n    $important-rule: if($important, '!important', '');\n\n    @if $fallback-value and $enable-fallback-declarations {\n      @include gss.annotate($gss);\n      #{$property}: #{$fallback-value} #{$important-rule};\n\n      // Add @alternate to annotations.\n      $gss: map.merge(\n        $gss,\n        (\n          alternate: true,\n        )\n      );\n    }\n\n    @include gss.annotate($gss);\n    #{$property}: #{$value} #{$important-rule};\n  }\n}\n","//\n// Copyright 2020 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n@use 'sass:map';\n\n/// Adds optional GSS annotation comments. Useful for theme mixins where one or\n/// more properties are set indirectly.\n///\n/// @example\n///   `annotate((noflip: true)) => /* @noflip */`\n///\n/// @param {Map} $annotations - Map of annotations. Values must be set to `true`\n///     for an annotation to be added.\n@mixin annotate($annotations) {\n  @if (map.get($annotations, alternate) == true) {\n    /* @alternate */\n  }\n\n  // noflip must be the last tag right before the property\n  @if (map.get($annotations, noflip) == true) {\n    /* @noflip */\n  }\n}\n"],"sourceRoot":""}